__meta__:
  program-name: topologist
  default-config: /etc/topologist.yaml
  description: A configuration service implementation
    for nanoconfig and nanomsg

__types__:

  nanomsg_addr: !TagScalar
    tags:
      Bind: 0
      Connect: 1
    type: !String

  pair_options: !Struct
    port: &port !Int
      min: 1
      max: 65535
      description: A TCP port to use for connection. The port is allocated
        on the bound side
      default: 0
    priority: !Int
      min: 1
      max: 16
      default: 8
      description: The priority for this connection. Useful only on REQ and
        PUSH sockets. (NN_SNDPRIO nanomsg option)
    local-addr: !String
      description: The IPC or INPROC address. Note: topologist doesn't ensure
        that request origin is in same process, so use INPROC addresses with
        care. However topologist assumes that local addresses are different
        on the different host (this assumption may be broken for lightweight
        virtual machines like LXC)
    <<: &socket_options
      linger: !Int
        min: 0
        max: 86400000
        default: -1
        description: The socket linger timeout in milliseconds (NN_LINGER
          nanomsg option)
      sndbuf: !Int
        min: 0
        max: 1Ti
        default: -1
        description: Size of send buffer (NN_SNDBUF option)
      rcvbuf: !Int
        min: 0
        max: 1Ti
        default: -1
        description: Size of recv buffer (NN_RCVBUF option)
      reconnect-interval: !Int
        min: 1
        max: 86400000
        default: -1
        description: Reconnection interval (NN_RECONNECT_IVL option)
      reconnect-interval-max: !Int
        min: 1
        max: 86400000
        default: -1
        description: Max reconnection interval for exponential backoff
          (NN_RECONNECT_IVL_MAX option)
    options-for-bind: *socket_options
    options-for-connect: *socket_options
    # TODO(tailhook) add other socket options

  assignment: !Struct
    host: !String

  topology_type: !Enum
    options:
      reqrep: 1
      pipeline: 2
      pubsub: 3
      pair: 4
      bus: 5
      survey: 6

  intern: !Struct
    type: !Type topology_type
    layout: !String
    node-hierarchy: !Array
      element: !String
      description: List of fields from request that form hierarchy for this
        topology. Top to bottom order. They are used both: to apply rules to
        hierarchy and to create names for topology subscriptions.
    sub-layouts: !Mapping
      key-element: !String
      value-element: !String
    assign: !Mapping
      key-element: !String
      value-element: !Array
        element: !Type assignment

  extern: !Struct
    topology: !String
      description: Topology where extract the slot from
    slot: !String
      description: The name of the slot in the topology

  topology: !Choice
    choices:
      Extern: !Type extern
      Topology: !Type intern



server:

  config-addr: !Array
    element: !Type nanomsg_addr
    description: List of addresses to bind using REP socket for
      name requests

  updates-addr: !Array
    element: !Type nanomsg_addr
    description: List of addresses to bind using PUB socket for sending
      configuration updates


layouts: !Mapping
  key-element: !String
  value-element: !Mapping
    key-element: !String
    value-element: !Type pair_options

topologies: !Mapping
  key-element: !String
  value-element: !Type topology


__if__:defined COMMAND_LINE:
  query_file: !String
    only-command-line: true
    command-line:
      names: [-Q, --query-file]
      metavar: FILE
    description: Text file with list of queries
  graph: !String
    only-command-line: true
    command-line:
      names: [-G, --graph-for-topology]
      metavar: TOPOLOGY
    description: Prints dot-formatted graph for the topology
  output: !String
    only-command-line: true
    command-line:
      names: [-o, --output]
      metavar: FILE
    description: File name to write query results to
    default: "-"
